export var Messages;
(function (Messages) {
    Messages["TYPE_KEY_VALIDATE"] = "Checking Credential type...";
    Messages["TYPE_KEY_SUCCESS"] = "Credential type key is present in the credential with valid data.";
    Messages["TYPE_KEY_ERROR"] = "Credential type key is not present or having invalid data in the credential.";
    Messages["CONTEXT_KEY_VALIDATE"] = "Checking credential @context...";
    Messages["CONTEXT_KEY_SUCCESS"] = "Credential @context key is present in the credential with valid data.";
    Messages["CONTEXT_KEY_ERROR"] = "Credential @context key is not present or having invalid data in the credential.";
    Messages["ID_KEY_VALIDATE"] = "Checking credential id...";
    Messages["ID_KEY_SUCCESS"] = "Credential id key is present in the credential with valid data.";
    Messages["ID_KEY_ERROR"] = "Credential id key is not present or having invalid data in the credential.";
    Messages["CREDENTIAL_SUBJECT_KEY_VALIDATE"] = "Checking credential credentialSubject...";
    Messages["CREDENTIAL_SUBJECT_KEY_SUCCESS"] = "Credential credential subject key is present in the certificate with valid data.";
    Messages["CREDENTIAL_SUBJECT_KEY_ERROR"] = "Credential credentialSubject key is not present or having invalid data in the credential.";
    Messages["PROOF_KEY_VALIDATE"] = "Checking credential proof...";
    Messages["PROOF_KEY_SUCCESS"] = "Credential proof key is present in the credential with valid data.";
    Messages["PROOF_KEY_ERROR"] = "Credential proof key is not present or having invalid data in the credential.";
    Messages["ISSUANCE_DATE_KEY_VALIDATE"] = "Checking issuance date...";
    Messages["ISSUANCE_DATE_KEY_SUCCESS"] = "Credential issuance date key is present in the credential with valid data.";
    Messages["ISSUANCE_DATE_KEY_ERROR"] = "Credential issuance date key is not present or having invalid data in the credential.";
    Messages["ISSUER_VALIDATION_STARTED"] = "Credential issuer validation started...";
    Messages["ISSUER_KEY_SUCCESS"] = "Credential issuer validation successful.";
    Messages["ISSUER_KEY_ERROR"] = "Credential issuer key is not present or having invalid data in the credential.";
    Messages["FETCHING_ISSUER_PROFILE"] = "Fetching issuer validation started...";
    Messages["FETCHING_ISSUER_PROFILE_SUCCESS"] = "Fetching issuer profile details successfully.";
    Messages["FETCHING_ISSUER_PROFILE_ERROR"] = "Error while fetching issuer profile details";
    Messages["CONTEXT_ISSUER_PROFILE_KEY_VALIDATE"] = "Checking issuer profile information @context...";
    Messages["CONTEXT_ISSUER_PROFILE_KEY_SUCCESS"] = "@context key is present in the issuer profile information with valid data.";
    Messages["CONTEXT_ISSUER_PROFILE_KEY_ERROR"] = "Credential @context key is not present or having invalid data in the issuer profile information.";
    Messages["TYPE_ISSUER_PROFILE_KEY_VALIDATE"] = "Checking issuer profile information type...";
    Messages["TYPE_ISSUER_PROFILE_KEY_SUCCESS"] = "type key is present in the issuer profile information with valid data.";
    Messages["TYPE_ISSUER_PROFILE_KEY_ERROR"] = "type key is not present or having invalid data in the issuer profile information.";
    Messages["ID_ISSUER_PROFILE_KEY_VALIDATE"] = "Checking issuer profile information id...";
    Messages["ID_ISSUER_PROFILE_KEY_SUCCESS"] = "id key is present in the issuer profile information with valid data.";
    Messages["ID_ISSUER_PROFILE_KEY_ERROR"] = "id key is not present or having invalid data in the issuer profile information.";
    Messages["NAME_ISSUER_PROFILE_KEY_VALIDATE"] = "Checking issuer profile information name...";
    Messages["NAME_ISSUER_PROFILE_KEY_SUCCESS"] = "name key is present in the issuer profile information with valid data.";
    Messages["NAME_ISSUER_PROFILE_KEY_ERROR"] = "name key is not present or having invalid data in the issuer profile information.";
    Messages["EMAIL_ISSUER_PROFILE_KEY_VALIDATE"] = "Checking issuer profile information email...";
    Messages["EMAIL_ISSUER_PROFILE_KEY_SUCCESS"] = "email key is present in the issuer profile information with valid data.";
    Messages["EMAIL_ISSUER_PROFILE_KEY_ERROR"] = "email key is not present or having invalid data in the issuer profile information.";
    Messages["REVOCATION_LIST_ISSUER_PROFILE_KEY_VALIDATE"] = "Checking issuer profile information revocationList...";
    Messages["REVOCATION_LIST_ISSUER_PROFILE_KEY_SUCCESS"] = "revocationList key is present in the issuer profile information with valid data.";
    Messages["REVOCATION_LIST_ISSUER_PROFILE_KEY_ERROR"] = "revocationList key is not present or having invalid data in the issuer profile information.";
    Messages["PUBLIC_KEY_ISSUER_PROFILE_KEY_VALIDATE"] = "Checking issuer profile information publicKey...";
    Messages["PUBLIC_KEY_ISSUER_PROFILE_KEY_SUCCESS"] = "publicKey key is present in the issuer profile information with valid data.";
    Messages["PUBLIC_KEY_ISSUER_PROFILE_KEY_ERROR"] = "publicKey key is not present or having invalid data in the issuer profile information.";
    Messages["FETCHING_REVOCATION_LIST_ISSUER_PROFILE"] = "Fetching revocation list started...";
    Messages["FETCHING_REVOCATION_LIST_ISSUER_PROFILE_SUCCESS"] = "Fetching revocation list details successfully.";
    Messages["FETCHING_REVOCATION_LIST_ISSUER_PROFILE_ERROR"] = "Error while fetching revocation list";
    Messages["CONTEXT_REVOCATION_LIST_KEY_VALIDATE"] = "Checking revocation list @context...";
    Messages["CONTEXT_REVOCATION_LIST_KEY_SUCCESS"] = "@context key is present in the revocation list with valid data.";
    Messages["CONTEXT_REVOCATION_LIST_KEY_ERROR"] = "@context key is not present or having invalid data in the revocation list.";
    Messages["TYPE_REVOCATION_LIST_KEY_VALIDATE"] = "Checking revocation list @context...";
    Messages["TYPE_REVOCATION_LIST_KEY_SUCCESS"] = "@context key is present in the revocation list with valid data.";
    Messages["TYPE_REVOCATION_LIST_KEY_ERROR"] = "@context key is not present or having invalid data in the revocation list.";
    Messages["ID_REVOCATION_LIST_KEY_VALIDATE"] = "Checking revocation list id...";
    Messages["ID_REVOCATION_LIST_KEY_SUCCESS"] = "id key is present in the revocation list with valid data.";
    Messages["ID_REVOCATION_LIST_KEY_ERROR"] = "id key is not present or having invalid data in the revocation list.";
    Messages["ISSUER_REVOCATION_LIST_KEY_VALIDATE"] = "Checking revocation list issuer...";
    Messages["ISSUER_REVOCATION_LIST_KEY_SUCCESS"] = "issuer key is present in the revocation list with valid data.";
    Messages["ISSUER_REVOCATION_LIST_KEY_ERROR"] = "issuer key is not present or having invalid data in the revocation list.";
    Messages["REVOKED_ASSERTIONS_REVOCATION_LIST_KEY_VALIDATE"] = "Checking revocation list revokedAssertions...";
    Messages["REVOKED_ASSERTIONS_REVOCATION_LIST_KEY_SUCCESS"] = "revokedAssertions key is present in the revocation list with valid data.";
    Messages["REVOKED_ASSERTIONS_REVOCATION_LIST_KEY_ERROR"] = "revokedAssertions key is not present or having invalid data in the revocation list.";
    Messages["VALID_UNTIL_DATE_KEY_VALIDATE"] = "Checking credential validUntil...";
    Messages["VALID_UNTIL_DATE_KEY_SUCCESS"] = "validUntil key is present in the credential with valid data.";
    Messages["VALID_UNTIL_DATE_KEY_ERROR"] = "credential is expired.";
    Messages["CERTIFICATE_REVOCATION_LIST_STATUS"] = "Credential is valid and not revoked.";
    Messages["FETCHING_NORMALIZED_DECODED_DATA"] = "Fetching normalized and decoded data started...";
    Messages["FETCHING_NORMALIZED_DECODED_DATA_SUCCESS"] = "Fetched normalized and decoded data successfully.";
    Messages["FETCHING_NORMALIZED_DECODED_DATA_ERROR"] = "Error while fetching normalized and decoded data";
    Messages["ANCHOR_DECODED_DATA_KEY_VALIDATE"] = "Checking decoded data anchors...";
    Messages["ANCHOR_DECODED_DATA_KEY_SUCCESS"] = "anchors key is present with valid data.";
    Messages["ANCHOR_DECODED_DATA_KEY_ERROR"] = "Invalid credential.";
    Messages["PATH_DECODED_DATA_KEY_VALIDATE"] = "Checking decoded data path...";
    Messages["PATH_DECODED_DATA_KEY_SUCCESS"] = "path key is present with valid data.";
    Messages["PATH_DECODED_DATA_KEY_ERROR"] = "path key is not present or having invalid data list.";
    Messages["MERKLEROOT_DECODED_DATA_KEY_VALIDATE"] = "Checking decoded data merkleRoot...";
    Messages["MERKLEROOT_DECODED_DATA_KEY_SUCCESS"] = "merkleRoot key is present with valid data.";
    Messages["MERKLEROOT_DECODED_DATA_KEY_ERROR"] = "merkleRoot key is not present or having invalid data list.";
    Messages["TARGETHASH_DECODED_DATA_KEY_VALIDATE"] = "Checking decoded data targetHash...";
    Messages["TARGETHASH_DECODED_DATA_KEY_SUCCESS"] = "targetHash key is present with valid data.";
    Messages["TARGETHASH_DECODED_DATA_KEY_ERROR"] = "targetHash key is not present or having invalid data list.";
    Messages["SELECTED_ANCHOR_RETRIEVAL_ERROR"] = "Failed to retrieve selected anchor.";
    Messages["REQUIRED_VALUES_RETRIEVAL_ERROR"] = "Failed to retrieve required values from the selected anchor.";
    Messages["BASE_API_OR_NETWORK_RETRIEVAL_ERROR"] = "Failed to retrieve base API or base network value.";
    Messages["NO_MATCHING_API_FOUND_ERROR"] = "No matching API found.";
    Messages["URL_OR_APIKEY_RETRIEVAL_ERROR"] = "Failed to retrieve URL or API key from the matched API.";
    Messages["TRANSACTION_NOT_FOUND_ERROR"] = "Transaction not found.";
    Messages["DATA_FETCHED_ERROR"] = "Failed to fetch data from the blockchain API.";
    Messages["DATA_FETCHED_SUCCESS"] = "Data successfully fetched from the blockchain API.";
    Messages["CALCULATED_HASH_DIFFER_FROM_MERKLEROOT"] = "The calculated hash does not match the provided merkleRoot.";
    Messages["CALCULATED_HASH_MATCHES_WITH_MERKLEROOT"] = "The calculated hash matches the provided merkleRoot.";
    Messages["CALCULATED_HASH_DIFFER_FROM_TARGETHASH"] = "The calculated hash does not match the provided targetHash.";
    Messages["CALCULATED_HASH_MATCHES_WITH_TARGETHASH"] = "The calculated hash matches the provided targetHash.";
    Messages["MERKLE_PROOF_2019_VALIDATION_STARTED"] = "MerkleProof2019 validation started....";
    Messages["MERKLE_PROOF_2019_VALIDATION_SUCCESS"] = "MerkleProof2019 validation successful.";
    Messages["MERKLE_PROOF_2019_VALIDATION_FAILED"] = "MerkleProof2019 validation failed.";
})(Messages || (Messages = {}));
